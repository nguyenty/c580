\documentclass{article}
\usepackage[margin=0.5in]{geometry}
\usepackage{boxedminipage}
\usepackage{amsfonts}
\usepackage{amsmath} 
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{amsthm}
\usepackage{t1enc}
\usepackage{subfig}
\begin{document}
\title{\color{red}HW1 - STAT 580 - Sp 2015}
\author{Yet T Nguyen}
\date{01/29/2015}
\maketitle

\section*{1.}
\begin{verbatim}
#include <stdio.h>
#include <math.h>
#define P0 0.01 /* lower limit of the probability (p)*/
#define P1 0.5 /* upper limit of the probability (p)*/
#define PLEN 10 /* number of columns*/
#define N 5 /* number of experiments (n)*/


int fact(int n); /*funtion to calculate factorial of n*/

int main(){
  int x = 0; 
  float dist, p;
  p = P0;
  dist = (P1-P0)/(double)(PLEN-1);
  printf("x\\p\t"); 
  for (p = P0; p <= P1; p+= dist){
    printf("%.4f ", p); /* print p values*/
  }
  printf("\n\v"); /* print vertical tab */
  for (x = 0; x <= N; x++){
    printf("%d  \t", x);
    for (p = P0; p <= P1; p+= dist){
      printf("%.4f ", fact(N)/(fact(x)*fact(N-x))*pow(p,x)*pow(1-p, N-x)); /*print probabilites*/
    }
    printf("\n");
  }
  return 0;
}

int fact(int n){
  int out = 1;
  if (n ==0) out = 1;
  while (n >= 1){
    out = out*n;
    n--;
  }
  return out;
}
\end{verbatim}
% \begin{verbatim}
% 
% x\p  0.0100 0.0644 0.1189 0.1733 0.2278 0.2822 0.3367 0.3911 0.4456 0.5000 
% 
% 0  	 0.9510 0.7167 0.5311 0.3861 0.2746 0.1905 0.1284 0.0837 0.0524 0.0313 
% 1  	 0.0480 0.2469 0.3583 0.4047 0.4050 0.3746 0.3259 0.2688 0.2105 0.1563 
% 2  	 0.0010 0.0340 0.0967 0.1697 0.2389 0.2945 0.3308 0.3453 0.3384 0.3125 
% 3  	 0.0000 0.0023 0.0130 0.0356 0.0705 0.1158 0.1679 0.2218 0.2719 0.3125 
% 4  	 0.0000 0.0001 0.0009 0.0037 0.0104 0.0228 0.0426 0.0712 0.1093 0.1562 
% 5  	 0.0000 0.0000 0.0000 0.0002 0.0006 0.0018 0.0043 0.0092 0.0176 0.0312 
% \end{verbatim}
\section*{2.}
\begin{itemize}
\item[(a)] We have 
\begin{align*}
&f(x) \propto \exp(-x) \quad 0<x<2\\
& \Rightarrow F(x) = (1-\exp(-x))/(1-exp(-2)) \quad 0<x<2\\
& \Rightarrow F^{-1}(u) = -\log(1-(1-\exp(-2))u) \quad 0<u<1.
\end{align*}
The simulation algorithm is as below
\begin{itemize}
\item Generate a uniform random variable $u$.
\item The variable $X \equiv F^{-1}(u)$ will has the requried distribution.
\end{itemize}
\item[(b)]
\begin{verbatim}
#include <stdio.h>
#include <time.h>
#define MATHLIB_STANDALONE
#include <Rmath.h>
int main() {
  double u, x;
  set_seed(time(NULL), 580580); /* set seed */
    u = unif_rand(); /* uniform random variable */
    x = -log(1- (1-exp(-2))*u);
    printf("%f\n ", x);
    return 0;
    }
\end{verbatim}
\item[(c)]
<<fig.align='center'>>=
u <- runif(5000, 0, 1)

x <- -log(1-(1-exp(-2))*u)
hist(x, prob = T, nclass = 100)
lines(density(x), col = "red")

@
\end{itemize}

\section*{3.}
\begin{itemize}
\item[(a)]
<<  out.width='8cm', out.height='8cm', fig.show='hold',fig.align='center'>>=
set.seed(1)
rs <- function(g){
  if (g=="g1"){
    repeat{
      x <- rexp(1,1)
      u <- runif(1,0,1)
      r <- 1/(1+x^2)
      if (u <= r){
        res <- x
        break
      }
  }
  }
  if (g=="g2"){
    repeat{
      x <- abs(rcauchy(1,0,1))
      u <- runif(1,0,1)
      r <- exp(-x)
      if (u <= r){
        res <- x
        break
      }
    }
  }
  res
}

library(plyr)
n <- 5000
pm1 <- proc.time()
rs.g1 <- laply(1:n, function(i)rs("g1"))
proc.time()-pm1

hist(rs.g1, nclass = 100, prob = T)
lines(density(rs.g1), col = "red")
pm2 <- proc.time()
rs.g2 <- laply(1:n, function(i)rs("g2"))
proc.time()-pm2
hist(rs.g2, nclass = 100, prob = T)
lines(density(rs.g2), col = "red")

@
\item[(b)] From the output, the algorithm using envelop density $g_1$ is faster than the one using envelop density $g_2$. The sampling results of those densities are similar.
\end{itemize}
\section*{4.}
We have 
\begin{align}
& f(x,y) \propto x^\alpha y \notag\\
&\Rightarrow f(x) \propto \int_{0<y<\sqrt{1-x^2}} x^\alpha y dy \propto x^\alpha(1-x^2)
\quad \mbox{ for } 0<x<1 \label{eq1}\\
&\mbox{and } f(y|x) \propto \frac{x^\alpha y}{x^\alpha(1-x^2)} \propto y \quad \mbox {for } y \leq \sqrt{1-x^2} \label{eq2}.
\end{align}

\eqref{eq1} implies that
\begin{equation}\label{eq3}
x^\alpha (1-x^2) \leq x^\alpha
\end{equation}
and \eqref{eq2} implies that
\begin{equation}\label{eq4}
F(y|x) = \frac{y^2}{1-x^2} \quad  0<y\leq 1-x^2, x>0
\end{equation}

From \eqref{eq3} and \eqref{eq4}, a rejection sampling algorithm to sample $(x,y)$ has distribution $f$ is as below

\begin{itemize}
\item First simulate $x$ with density $f_x \propto x^\alpha (1-x^2)$ by 

\begin{itemize}
 \item Simulate $z$ having the density $\propto z^\alpha$ $(0<z<1)$ by using the inverse transform method.
\item Using $z$ above as a proposal to simulate $x$ according to rejection sampling method.
\end{itemize}
\item Next, simulate $y|x$ having CDF as in \eqref{eq4} by using inverse transform method.
\end{itemize}

\end{document}